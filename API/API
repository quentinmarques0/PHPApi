<?php
using("System");
using("Util");
using("Database");
Util::$Notifies = new ListNotifies();

using("Langs/Lang");

using("Class/Controller");
using("Class/Page");
using("Class/404");

using("Web/Templates");
using("Web/Routes");


class API {
    public static string $RoutesPHPFunction = "aphpi_dofunc_";
    public static string $SaveFunction = "aphpi_savefunc_";
    public static string $REQUESTS = "aphpi_requests_";
    public static string $PHPAction = "aphpi_action_";
    public static string $APIoldPage = "op";
    public static string $LangID = "ses_api_lang";

    private static Routes $_Route;
    private static Controller $_Controller;
    private static ListRoutes $Routes;
    public static string $RouteRequestStr = 'r';
    public static function Routes(){
        return API::$Routes;
    }

    public static function init()
    {
        session_start();
        echo $_SESSION[API::$LangID];

        define("APIPAGENAME", "ses_api_pn");
        define("APIOLDURL", "ses_api_ourl");
        define("APINEXTURL", "ses_api_nurl");
        define("APIFUNC", "ses_api_func");
        define("APITEMPLATE", "ses_api_temp");
        if(!isset($_SESSION[APIPAGENAME])) API::UpdateAPISesPageName();
        if(!isset($_SESSION[APIOLDURL])) API::UpdateAPISesOUrl();
        if(!isset($_SESSION[APINEXTURL])) API::UpdateAPISesNUrl();
        if(!isset($_SESSION[APIFUNC])) API::UpdateAPIFunc();
        if(!isset($_SESSION[APITEMPLATE])) API::UpdateAPITemplate();
        if(!isset($_SESSION[API::$LangID])) $_SESSION[API::$LangID] = "en_US";



        API::$Routes = new ListRoutes();

        $route404 = Routes::register("404", "_404", false);
        $route404->page = new _404();
    }

    public static function GetURL()
    {
      return "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
    }

    public static function getSavedFunc()
    {
      return $_SESSION[APIFUNC];
    }

    public static function setSavedFunc($f)
    {
      $_SESSION[APIFUNC] = $f;
    }

    public static function UpdateAPIFunc()
    {
      API::setSavedFunc("");
    }

    public static function UpdateAPITemplate()
    {
      $value = Templates::getName("simple");
      $_SESSION[APITEMPLATE] =  $value;

      if(isset($_REQUEST[API::$LangID]))
      {
          $_SESSION[API::$LangID] = $_REQUEST[API::$LangID];
      }

      Lang::SetLang($_SESSION[API::$LangID]);
      
    }

    public static function UpdateAPISesOUrl()
    {
      $_SESSION[APIOLDURL] = ("http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]");
    }
    public static function UpdateAPISesNUrl($url = null)
    {
      if($url == null) $url = "$_SERVER[REQUEST_URI]";
      $_SESSION[APINEXTURL] = ("http://$_SERVER[HTTP_HOST]/$url");
    }


    public static function UpdateAPISesPageName()
    {
      $_SESSION[APIPAGENAME] = ($_REQUEST[API::$RouteRequestStr] ?? "home");
    }

    public static function setBaseController(string $controller)
    {
      //require("$controller");
      API::$_Controller = new $controller;
    }

    public static function setController(string $controller)
    {
        require("Controllers/$controller.php");
        API::$_Controller = new $controller;
    }

    public static function getController()
    {
        return API::$_Controller;
    }

    public static function setInitialRoute(string $route, string $page)
    {
        API::$_Route = Routes::register("$route", "$page");
    }

    public static function getInitialRoute()
    {
        return API::$_Route;
    }

    public static function Translate($line)
    {
        //JSlog($line);

        $action = 0;
        $postAction = 1;
        $arg = "";
        $baseArg = "";
        $chars = ["",""];
        if(str_contains($line, "{{") && str_contains($line, "}}")){
            $action = Core::StartPHP()." echo";
            $postAction = "".Core::EndPHP();
            $arg = $line;
            $arg = split("{{", $arg)[1];
            $arg = split("}}", $arg)[0];
            $baseArg = $arg;
            $arg = trim($arg);

            $chars = ["{","}"];

            $prevChars = split("{{", $line)[0];
            $nextChars = split("}}", $line)[1];
        }
        if(str_contains($line, "{%") && str_contains($line, "%}")){
            $action = Core::StartPHP()." Templates::use_module(";
            $postAction = ")".Core::EndPHP();
            $arg = $line;
            $arg = split("{%", $arg)[1];
            $arg = split("%}", $arg)[0];
            $baseArg = $arg;

            $arg = '"'.trim($arg).'"';

            $chars = ["%","%"];

            $prevChars = split("{%", $line)[0];
            $nextChars = split("%}", $line)[1];
        }
        if(str_contains($line, "{#") and str_contains($line, "#}")){
            $action = Core::StartPHP()." echo Lang::Translate(";
            $postAction = ")".Core::EndPHP();
            $arg = $line;
            $arg = split("{#", $arg)[1];
            $arg = split("#}", $arg)[0];
            $baseArg = $arg;

            $arg = '"'.trim($arg).'"';

            $chars = ["#","#"];

            $prevChars = split("{#", $line)[0];
            $nextChars = split("#}", $line)[1];
        }

        //echo $action;
        if($action == 0) {

            $line = str_replace('fsrc="','fsource="', $line);
            $line = str_replace('fhref="','fhtmlref="', $line);

            $line = str_replace('src="','src="'.Templates::get_directory().'/', $line);
            $line = str_replace('href="','href="'.Templates::get_directory().'/', $line);

            $line = str_replace('fsource="','src="', $line);
            $line = str_replace('fhtmlref="','href="', $line);
            $baseArg = $arg;

            //echo $line;
            return $line;
        }

        $code = $action.' '.$arg.' '.$postAction;
        $line = str_replace("{".$chars[0].$baseArg.$chars[1]."}", $code, $line);
        //echo $line;
        if(str_contains_any_pairs($line,
                                ["{{", "}}"],
                                ["{%", "%}"],
                                ["{#", "#}"]
                                )
            )
        {
            return API::Translate($line);
        }
        return $line;
    }

    public static function RequireTranslate($_file)
    {
        $line = "";
        $i = 0;
        if($file = fopen($_file, "r")){
            while(!feof($file)){
                $newLine = fgets($file);
                if(trim($newLine) == "") continue;
                $newLine = API::Translate($newLine);
                //echo $newLine;
                $line = $line.$newLine;
                /*JSLog("[File: $_file][Line: $i]");
                echo "\n";

                JSLog(trim($newLine));
                echo "\n";
                echo "\n";*/
                $i++;
            }
        }
        //echo $_file;
        eval(Core::EndPHP()."$line");
    }

}

API::init();

function phpref($ref, $tag = "href")
{
    return "$tag=\"?".API::$RouteRequestStr."=$ref\"";
}

function phpvar($key, $value)
{
    return "name=$key value=$value";
}

function ifphpref($route, $iftrue)
{
    if($_REQUEST[API::$RouteRequestStr] == $route)
    {
        return $iftrue;
    }
    return "";
}

function ifanyphpref($arr, $iftrue)
{
    foreach($arr as $route)
    {
        $result = ifphpref($route, $iftrue) ;
        if($result !== "")
        {
            return $result;
        }
    }
    return "";
}