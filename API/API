<?php
using("System");
using("Util");
Util::$Notifies = new ListNotifies();

using("Langs/Lang");

using("Class/Controller");
using("Class/Page");
using("Class/404");

using("Web/Templates");
using("Web/Routes");


class API {
    private static Routes $_Route;
    private static Controller $_Controller;
    private static ListRoutes $Routes;
    public static string $RouteRequestStr = 'r';
    public static function Routes(){
        return API::$Routes;
    }

    public static function init()
    {
        API::$Routes = new ListRoutes();

        $route404 = Routes::register("404", "_404", false);
        $route404->page = new _404();
    }

    public static function setController(string $controller)
    {
        require("Controllers/$controller.php");
        API::$_Controller = new $controller;
    }

    public static function getController()
    {
        return API::$_Controller;
    }

    public static function setInitialRoute(string $route, string $page)
    {
        API::$_Route = Routes::register("$route", "$page");
    }

    public static function getInitialRoute()
    {
        return API::$_Route;
    }

    public static function Translate($line)
    {
        $action = 0;
        $postAction = 1;
        $arg = "";
        if(str_contains($line, "{{") && str_contains($line, "}}")){
            $action = Core::StartPHP()." echo";
            $postAction = "".Core::EndPHP();
            $arg = $line;
            $arg = split("{{", $arg)[1];
            $arg = split("}}", $arg)[0];
            $arg = trim($arg);


            $prevChars = split("{{", $line)[0];
            $nextChars = split("}}", $line)[1];
        }
        if(str_contains($line, "{%") && str_contains($line, "%}")){
            $action = Core::StartPHP()." Templates::use_module(";
            $postAction = ")".Core::EndPHP();
            $arg = $line;
            $arg = split("{%", $arg)[1];
            $arg = split("%}", $arg)[0];
            $arg = '"'.trim($arg).'"';

            $prevChars = split("{%", $line)[0];
            $nextChars = split("%}", $line)[1];
        }
        if(str_contains($line, "{#") and str_contains($line, "#}")){
            $action = Core::StartPHP()." echo Lang::Translate(";
            $postAction = ")".Core::EndPHP();
            $arg = $line;
            $arg = split("{#", $arg)[1];
            $arg = split("#}", $arg)[0];
            $arg = '"'.trim($arg).'"';

            $prevChars = split("{#", $line)[0];
            $nextChars = split("#}", $line)[1];
        }

        //echo $action;
        if($action == 0) return $line;


        $line = str_replace("{{", "", $line);
        $line = str_replace("}}","",$line);

        //Use_module
        $line = str_replace("{%", "", $line);
        $line = str_replace("%}","",$line);

        //Translate Language
        $line = str_replace("{#", "", $line);
        $line = str_replace("#}","",$line);

        //$arg = trim($line);
        //echo $arg;

        $code = $prevChars.$action.' '.$arg.' '.$postAction.$nextChars;

        //echo $code;
        return $code;
    }

    public static function RequireTranslate($_file)
    {
        $line = "";
        if($file = fopen($_file, "r")){
            while(!feof($file)){
                $newLine = fgets($file);
                if(trim($newLine) == "") continue;
                $newLine = API::Translate($newLine);
                //echo $newLine;
                $line = $line.$newLine;
            }
        }
        eval(Core::EndPHP()."$line");
    }
    
}

API::init();

function phpref($ref, $tag = "href")
{
    return "$tag=\"?".API::$RouteRequestStr."=$ref\"";
}

function phpvar($key, $value)
{
    return "name=$key value=$value";
}